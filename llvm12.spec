#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
# Source0 file verified with key 0xA2C794A986419D8A (tstellar@redhat.com)
#
%define keepstatic 1
Name     : llvm12
Version  : 12.0.1
Release  : 1
URL      : https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/llvm-project-12.0.1.src.tar.xz
Source0  : https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/llvm-project-12.0.1.src.tar.xz
Source1  : https://github.com/KhronosGroup/SPIRV-LLVM-Translator/archive/v12.0.0/SPIRV-LLVM-Translator-12.0.0.tar.gz
Source2  : https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/llvm-project-12.0.1.src.tar.xz.sig
Summary  : Google microbenchmark framework
Group    : Development/Tools
License  : Apache-2.0 BSD-3-Clause ISC MIT MPL-2.0 NCSA
BuildRequires : Sphinx
BuildRequires : Vulkan-Headers-dev Vulkan-Loader-dev Vulkan-Tools
BuildRequires : Z3-dev
BuildRequires : Z3-dev32
BuildRequires : binutils-dev
BuildRequires : buildreq-cmake
BuildRequires : buildreq-distutils3
BuildRequires : buildreq-golang
BuildRequires : cmake
BuildRequires : doxygen
BuildRequires : elfutils-dev
BuildRequires : gcc-dev32
BuildRequires : gcc-libgcc32
BuildRequires : gcc-libstdc++32
BuildRequires : git
BuildRequires : glibc-dev
BuildRequires : glibc-dev32
BuildRequires : glibc-libc32
BuildRequires : googletest-dev
BuildRequires : grep
BuildRequires : libffi-dev
BuildRequires : libffi-dev32
BuildRequires : libstdc++-dev
BuildRequires : libxml2-dev
BuildRequires : libxml2-dev32
BuildRequires : llvm
BuildRequires : llvm-dev
BuildRequires : lua-dev
BuildRequires : ncurses-dev
BuildRequires : ninja
BuildRequires : perl
BuildRequires : pkg-config
BuildRequires : pkgconfig(32libffi)
BuildRequires : pkgconfig(libedit)
BuildRequires : pkgconfig(libffi)
BuildRequires : protobuf-dev
BuildRequires : pypi(flit)
BuildRequires : pypi(graphviz)
BuildRequires : pypi(humanize)
BuildRequires : pypi(matplotlib)
BuildRequires : pypi(pandas)
BuildRequires : pypi(psutil)
BuildRequires : pypi(ptyprocess)
BuildRequires : pypi(pybind11)
BuildRequires : pypi(seaborn)
BuildRequires : python3-dev
BuildRequires : rsync
BuildRequires : sed
BuildRequires : swig
BuildRequires : valgrind-dev
BuildRequires : zlib-dev
BuildRequires : zlib-dev32
Patch1: llvm-0001-Improve-physical-core-count-detection.patch
Patch2: llvm-0002-Produce-a-normally-versioned-libLLVM.patch
Patch3: llvm-0003-Allow-one-more-FMA-fusion.patch
Patch4: clang-0001-Detect-Clear-Linux-and-apply-Clear-s-default-linker-.patch
Patch5: clang-0002-Make-Clang-default-to-Westmere-on-Clear-Linux.patch
Patch6: clang-0003-Add-the-LLVM-major-version-number-to-the-Gold-LTO-pl.patch
Patch7: clang-0004-Add-f-instructions-that-GCC-has-that-Clang-must-igno.patch

%description
Polly - Polyhedral optimizations for LLVM
-----------------------------------------
http://polly.llvm.org/

%prep
%setup -q -n llvm-project-12.0.1.src
cd %{_builddir}
tar xf %{_sourcedir}/SPIRV-LLVM-Translator-12.0.0.tar.gz
cd %{_builddir}/llvm-project-12.0.1.src
mkdir -p llvm/projects/SPIRV-LLVM-Translator
cp -r %{_builddir}/SPIRV-LLVM-Translator-12.0.0/* %{_builddir}/llvm-project-12.0.1.src/llvm/projects/SPIRV-LLVM-Translator
%patch1 -p1
%patch2 -p1
%patch3 -p1
%patch4 -p1
%patch5 -p1
%patch6 -p1
%patch7 -p1

%build
## build_prepend_once content
# Bootstrap Clang and the table generators
# See https://build.opensuse.org/package/view_file/devel:tools:compiler/llvm10/llvm10.spec?expand=1
pushd llvm
mkdir clr-bootstrap-build
pushd clr-bootstrap-build
CFLAGS="`sed -E 's/-Wl,\S+\s//g; s/-Wp,-D_FORTIFY_SOURCE=2//; s/-feliminate-unused-debug-types//' <<<$CFLAGS` -fno-integrated-as"
CXXFLAGS="`sed -E 's/-Wl,\S+\s//g; s/-Wp,-D_FORTIFY_SOURCE=2//; s/-feliminate-unused-debug-types//' <<<$CXXFLAGS` -fno-integrated-as"
%cmake .. \
-G Ninja \
-DCMAKE_BUILD_TYPE=Release \
-DBUILD_SHARED_LIBS:BOOL=OFF \
-DCMAKE_C_COMPILER=clang \
-DCMAKE_C_FLAGS="$CFLAGS -g0" \
-DCMAKE_CXX_COMPILER=clang++ \
-DCMAKE_CXX_FLAGS="$CXXFLAGS -g0" \
-DLLVM_ENABLE_PROJECTS="clang;llvm-tblgen;clang-tblgen" \
-DLLVM_BUILD_LLVM_DYLIB:BOOL=OFF \
-DLLVM_LINK_LLVM_DYLIB:BOOL=OFF \
-DLLVM_ENABLE_ASSERTIONS=OFF \
-DLLVM_TARGETS_TO_BUILD=Native \
-DCLANG_ENABLE_ARCMT:BOOL=OFF \
-DCLANG_ENABLE_STATIC_ANALYZER:BOOL=OFF \
-DCMAKE_SKIP_RPATH:BOOL=OFF \
-DLLVM_LIBDIR_SUFFIX=64 \
-DLLVM_BINUTILS_INCDIR=/usr/include \
-DLLVM_HOST_TRIPLE="x86_64-generic-linux" \
-DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python3
ninja -v
popd
export PATH=/usr/lib64/ccache/bin/:${PWD}/clr-bootstrap-build/bin:${PATH}
export LLVM_AR=${PWD}/clr-bootstrap-build/bin/llvm-ar
export LLVM_RANLIB=${PWD}/clr-bootstrap-build/bin/llvm-ranlib
export LLVM_TABLEGEN=${PWD}/clr-bootstrap-build/bin/llvm-tblgen
export CLANG_TABLEGEN=${PWD}/clr-bootstrap-build/bin/clang-tblgen
popd
## build_prepend_once end
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1643916345
unset LD_AS_NEEDED
pushd llvm
mkdir -p clr-build
pushd clr-build
export GCC_IGNORE_WERROR=1
export CC=clang
export CXX=clang++
export LD=ld.gold
CFLAGS=${CFLAGS/ -Wa,/ -fno-integrated-as -Wa,}
CXXFLAGS=${CXXFLAGS/ -Wa,/ -fno-integrated-as -Wa,}
export CFLAGS="-O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell"
export CXXFLAGS=$CFLAGS
export FFLAGS="-O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell"
export FCFLAGS=$FFLAGS
unset LDFLAGS
unset LDFLAGS
export CFLAGS="$CFLAGS -fno-lto "
export FCFLAGS="$FFLAGS -fno-lto "
export FFLAGS="$FFLAGS -fno-lto "
export CXXFLAGS="$CXXFLAGS -fno-lto "
%cmake .. -G Ninja \
-DCMAKE_C_FLAGS="`sed -E 's/-Wl,\S+\s//g; s/-Wp,-D_FORTIFY_SOURCE=2//' <<<$CFLAGS`" \
-DCMAKE_CXX_FLAGS="`sed -E 's/-Wl,\S+\s//g; s/-Wp,-D_FORTIFY_SOURCE=2//' <<<$CXXFLAGS`" \
-DCMAKE_EXE_LINKER_FLAGS="$CXXFLAGS -Wl,--as-needed -Wl,--build-id=sha1" \
-DCMAKE_MODULE_LINKER_FLAGS="$CXXFLAGS -Wl,--as-needed -Wl,--build-id=sha1" \
-DCMAKE_SHARED_LINKER_FLAGS="$CXXFLAGS -Wl,--as-needed -Wl,--build-id=sha1" \
-DENABLE_LINKER_BUILD_ID=ON \
-DBUILD_SHARED_LIBS:BOOL=OFF \
-DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
-DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
-DLLVM_BUILD_RUNTIME:BOOL=ON \
-DLLVM_BUILD_TOOLS:BOOL=ON \
-DLLVM_ENABLE_FFI:BOOL=ON -DFFI_INCLUDE_DIR=`pkg-config --variable=includedir libffi` \
-DLLVM_ENABLE_RTTI:BOOL=ON \
-DLLVM_ENABLE_ZLIB:BOOL=ON \
-DLLVM_REQUIRES_RTTI:BOOL=ON \
-DLLVM_TABLEGEN=$LLVM_TABLEGEN \
-DCLANG_TABLEGEN=$CLANG_TABLEGEN \
-DLLVM_ENABLE_PROJECTS="lld;lldb;clang;clang-tools-extra;compiler-rt;openmp;polly;mler;" \
-DLLVM_LIBDIR_SUFFIX=64 \
-DLLVM_BINUTILS_INCDIR=/usr/include \
-DLLVM_HOST_TRIPLE="x86_64-generic-linux" \
-DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python3 \
`case "$PWD" in *build32) \
echo -DLLVM_BUILD_TOOLS:BOOL=OFF -DLLVM_TOOL_CLANG_BUILD:BOOL=OFF; \
echo -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=OFF -DLLVM_TOOL_LLD_BUILD:BOOL=OFF; \
echo -DLLVM_TOOL_OPENMP_BUILD:BOOL=OFF -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=OFF; \
echo -DLLVM_LIBDIR_SUFFIX=32 -DLLVM_HOST_TRIPLE="i686-generic-linux"; \
echo -DLLVM_ENABLE_PROJECTS="clang" \
;; \
esac`
ninja  %{?_smp_mflags}
popd
mkdir -p clr-build32
pushd clr-build32
export GCC_IGNORE_WERROR=1
export CC=clang
export CXX=clang++
export LD=ld.gold
CFLAGS=${CFLAGS/ -Wa,/ -fno-integrated-as -Wa,}
CXXFLAGS=${CXXFLAGS/ -Wa,/ -fno-integrated-as -Wa,}
export CFLAGS="-O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell"
export CXXFLAGS=$CFLAGS
export FFLAGS="-O2 -g -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wno-error -Wl,-z,max-page-size=0x1000 -march=westmere -mtune=haswell"
export FCFLAGS=$FFLAGS
unset LDFLAGS
unset LDFLAGS
export CFLAGS="$CFLAGS -fno-lto "
export FCFLAGS="$FFLAGS -fno-lto "
export FFLAGS="$FFLAGS -fno-lto "
export CXXFLAGS="$CXXFLAGS -fno-lto "
export PKG_CONFIG_PATH="/usr/lib32/pkgconfig:/usr/share/pkgconfig"
export ASFLAGS="${ASFLAGS}${ASFLAGS:+ }--32"
export CFLAGS="${CFLAGS}${CFLAGS:+ }-m32 -mstackrealign"
export CXXFLAGS="${CXXFLAGS}${CXXFLAGS:+ }-m32 -mstackrealign"
export LDFLAGS="${LDFLAGS}${LDFLAGS:+ }-m32 -mstackrealign"
%cmake -DLIB_INSTALL_DIR:PATH=/usr/lib32 -DCMAKE_INSTALL_LIBDIR=/usr/lib32 -DLIB_SUFFIX=32 .. -G Ninja \
-DCMAKE_C_FLAGS="`sed -E 's/-Wl,\S+\s//g; s/-Wp,-D_FORTIFY_SOURCE=2//' <<<$CFLAGS`" \
-DCMAKE_CXX_FLAGS="`sed -E 's/-Wl,\S+\s//g; s/-Wp,-D_FORTIFY_SOURCE=2//' <<<$CXXFLAGS`" \
-DCMAKE_EXE_LINKER_FLAGS="$CXXFLAGS -Wl,--as-needed -Wl,--build-id=sha1" \
-DCMAKE_MODULE_LINKER_FLAGS="$CXXFLAGS -Wl,--as-needed -Wl,--build-id=sha1" \
-DCMAKE_SHARED_LINKER_FLAGS="$CXXFLAGS -Wl,--as-needed -Wl,--build-id=sha1" \
-DENABLE_LINKER_BUILD_ID=ON \
-DBUILD_SHARED_LIBS:BOOL=OFF \
-DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
-DCLANG_LINK_CLANG_DYLIB:BOOL=ON \
-DLLVM_BUILD_RUNTIME:BOOL=ON \
-DLLVM_BUILD_TOOLS:BOOL=ON \
-DLLVM_ENABLE_FFI:BOOL=ON -DFFI_INCLUDE_DIR=`pkg-config --variable=includedir libffi` \
-DLLVM_ENABLE_RTTI:BOOL=ON \
-DLLVM_ENABLE_ZLIB:BOOL=ON \
-DLLVM_REQUIRES_RTTI:BOOL=ON \
-DLLVM_TABLEGEN=$LLVM_TABLEGEN \
-DCLANG_TABLEGEN=$CLANG_TABLEGEN \
-DLLVM_ENABLE_PROJECTS="lld;lldb;clang;clang-tools-extra;compiler-rt;openmp;polly;mler;" \
-DLLVM_LIBDIR_SUFFIX=64 \
-DLLVM_BINUTILS_INCDIR=/usr/include \
-DLLVM_HOST_TRIPLE="x86_64-generic-linux" \
-DPYTHON_EXECUTABLE:FILEPATH=/usr/bin/python3 \
`case "$PWD" in *build32) \
echo -DLLVM_BUILD_TOOLS:BOOL=OFF -DLLVM_TOOL_CLANG_BUILD:BOOL=OFF; \
echo -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=OFF -DLLVM_TOOL_LLD_BUILD:BOOL=OFF; \
echo -DLLVM_TOOL_OPENMP_BUILD:BOOL=OFF -DLLVM_TOOL_COMPILER_RT_BUILD:BOOL=OFF; \
echo -DLLVM_LIBDIR_SUFFIX=32 -DLLVM_HOST_TRIPLE="i686-generic-linux"; \
echo -DLLVM_ENABLE_PROJECTS="clang" \
;; \
esac`
ninja  %{?_smp_mflags}
unset PKG_CONFIG_PATH
popd
popd

%install
export SOURCE_DATE_EPOCH=1643916345
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/llvm12
cp %{_builddir}/SPIRV-LLVM-Translator-12.0.0/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/8f178caf2a2d6e6c711a30da69077572df356cf6
cp %{_builddir}/llvm-project-12.0.1.src/clang-tools-extra/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/a1691103171dc1d21cfa85f1d4809a16b9f1367f
cp %{_builddir}/llvm-project-12.0.1.src/clang/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/a1691103171dc1d21cfa85f1d4809a16b9f1367f
cp %{_builddir}/llvm-project-12.0.1.src/clang/tools/clang-format-vs/ClangFormat/license.txt %{buildroot}/usr/share/package-licenses/llvm12/b5d4ab4d1191e592c03310adfbe90d99a46bf9d7
cp %{_builddir}/llvm-project-12.0.1.src/compiler-rt/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/f4359b9da55a3b9e4d9513eb79cacf125fb49e7b
cp %{_builddir}/llvm-project-12.0.1.src/debuginfo-tests/dexter/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/af07f365643f841c69797e9059b66f0bd847f1cd
cp %{_builddir}/llvm-project-12.0.1.src/flang/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/85c0f2884378413881b4d3e27fc24b220f71889b
cp %{_builddir}/llvm-project-12.0.1.src/libc/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/a1691103171dc1d21cfa85f1d4809a16b9f1367f
cp %{_builddir}/llvm-project-12.0.1.src/libclc/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/8737af83de0d40386dca9a4abe2b6faa83cb4750
cp %{_builddir}/llvm-project-12.0.1.src/libcxx/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/7b75a5471af8b3d49e60df0a5d72f95ea8214231
cp %{_builddir}/llvm-project-12.0.1.src/libcxx/utils/google-benchmark/LICENSE %{buildroot}/usr/share/package-licenses/llvm12/2b8b815229aa8a61e483fb4ba0588b8b6c491890
cp %{_builddir}/llvm-project-12.0.1.src/libcxxabi/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/11156021d878bfcbdf2563b4f65db32b4d9f92a3
cp %{_builddir}/llvm-project-12.0.1.src/libunwind/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/d79062af10a33188d4a74d976323845a2cf9023d
cp %{_builddir}/llvm-project-12.0.1.src/lld/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/6b655b0685aa7ee33fa1e02103b3bf22ed06e099
cp %{_builddir}/llvm-project-12.0.1.src/lldb/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/8af372ad1edbed2cfaf0e79d25f7136ec6e55b47
cp %{_builddir}/llvm-project-12.0.1.src/lldb/third_party/Python/module/pexpect-4.6/LICENSE %{buildroot}/usr/share/package-licenses/llvm12/5a99e7077ee89ba92fb3f584855e8970096cd5dc
cp %{_builddir}/llvm-project-12.0.1.src/lldb/third_party/Python/module/ptyprocess-0.6.0/LICENSE %{buildroot}/usr/share/package-licenses/llvm12/db1f866b29c6a191752c7c5924b7572cdbc47c34
cp %{_builddir}/llvm-project-12.0.1.src/lldb/third_party/Python/module/six/LICENSE %{buildroot}/usr/share/package-licenses/llvm12/f226af67862c0c7a0e921e24672a3a1375691e3e
cp %{_builddir}/llvm-project-12.0.1.src/llvm/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/af07f365643f841c69797e9059b66f0bd847f1cd
cp %{_builddir}/llvm-project-12.0.1.src/llvm/test/YAMLParser/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/c01c212bdf3925189f673e2081b44094023860ea
cp %{_builddir}/llvm-project-12.0.1.src/llvm/tools/msbuild/license.txt %{buildroot}/usr/share/package-licenses/llvm12/b5d4ab4d1191e592c03310adfbe90d99a46bf9d7
cp %{_builddir}/llvm-project-12.0.1.src/llvm/utils/benchmark/LICENSE %{buildroot}/usr/share/package-licenses/llvm12/2b8b815229aa8a61e483fb4ba0588b8b6c491890
cp %{_builddir}/llvm-project-12.0.1.src/llvm/utils/lit/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/af07f365643f841c69797e9059b66f0bd847f1cd
cp %{_builddir}/llvm-project-12.0.1.src/llvm/utils/unittest/googlemock/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/5a2314153eadadc69258a9429104cd11804ea304
cp %{_builddir}/llvm-project-12.0.1.src/llvm/utils/unittest/googletest/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/5a2314153eadadc69258a9429104cd11804ea304
cp %{_builddir}/llvm-project-12.0.1.src/mlir/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/85c0f2884378413881b4d3e27fc24b220f71889b
cp %{_builddir}/llvm-project-12.0.1.src/openmp/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/e3cccabb67bd491a643d32a7d2b65b49836e626d
cp %{_builddir}/llvm-project-12.0.1.src/parallel-libs/acxxel/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/a1691103171dc1d21cfa85f1d4809a16b9f1367f
cp %{_builddir}/llvm-project-12.0.1.src/polly/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/8d3b142938f83e7045951089b52676a5605eee37
cp %{_builddir}/llvm-project-12.0.1.src/polly/lib/External/isl/LICENSE %{buildroot}/usr/share/package-licenses/llvm12/45c2429b5881295597e96c81fc50f7b8a42e769f
cp %{_builddir}/llvm-project-12.0.1.src/polly/tools/GPURuntime/LICENSE.TXT %{buildroot}/usr/share/package-licenses/llvm12/ce27417c74ca5ad6d0b5c96ede8ff82e4d87900f
cp %{_builddir}/llvm-project-12.0.1.src/pstl/LICENSE.txt %{buildroot}/usr/share/package-licenses/llvm12/72c865be698cefc46549ed61e279f98432364fca
pushd llvm
pushd clr-build32
%ninja_install32
if [ -d  %{buildroot}/usr/lib32/pkgconfig ]
then
pushd %{buildroot}/usr/lib32/pkgconfig
for i in *.pc ; do ln -s $i 32$i ; done
popd
fi
if [ -d %{buildroot}/usr/share/pkgconfig ]
then
pushd %{buildroot}/usr/share/pkgconfig
for i in *.pc ; do ln -s $i 32$i ; done
popd
fi
popd
pushd clr-build
%ninja_install
popd
popd
## Remove excluded files
rm -f %{buildroot}*/usr/lib64/libgomp.so
rm -f %{buildroot}*/usr/lib64/TestPlugin.so
rm -f %{buildroot}*/usr/lib64/cmake/llvm/LLVMStaticExports.cmake
rm -f %{buildroot}*/usr/lib64/cmake/llvm/LLVMStaticExports-relwithdebinfo.cmake
rm -f %{buildroot}*/usr/lib64/pkgconfig/LLVMSPIRVLib.pc
rm -f %{buildroot}*/usr/lib64/pkgconfig/SPIRV-Headers.pc
rm -f %{buildroot}*/usr/lib64/pkgconfig/'32*.pc'
rm -f %{buildroot}*/usr/lib/python3.10/site-packages/six.py
## install_append content
# Rename the Gold plugin elsewhere, as we're erasing *.so below
mv %{buildroot}/usr/lib64/LLVMgold.so %{buildroot}/usr/lib64/LLVMgold.so.save

# Remove files that should come from the main llvm package
rm -rf %{buildroot}/usr/include
rm -rf %{buildroot}/usr/lib64/*.a
rm -rf %{buildroot}/usr/lib64/*.so
rm -rf %{buildroot}/usr/lib64/cmake
rm -rf %{buildroot}/usr/lib64/pkgconfig
rm -rf %{buildroot}/usr/libexec

mv %{buildroot}/usr/share/package-licenses %{buildroot}/usr/
rm -rf %{buildroot}/usr/share/*
mv %{buildroot}/usr/package-licenses %{buildroot}/usr/share

# Rename the tools to have a versioned suffix and symlink back
pushd %{buildroot}/usr/bin
VERSION=%{version}
VERSION=${VERSION%%%%.*}
for f in *; do
case "$f" in
*-$VERSION)
# Already versioned, leave it alone
continue
;;
esac
if [ -L "$f" ]; then
cf=$(readlink $f)
case $cf in
*-$VERSION)
# symlink already points to versioned file
continue
;;
*)
# Retarget the symlink
ln -s -f $cf-$VERSION $f
;;
esac
fi
mv $f $f-$VERSION
ln -s -f $f-$VERSION $f
done
popd

# Ditto for the gold plugin
pushd %{buildroot}/usr/lib64
mv LLVMgold.so LLVMgold-$VERSION.so
ln -s LLVMgold-$VERSION.so LLVMgold.so
mkdir -p ../lib/bfd-plugins
ln -s ../../lib64/LLVMgold-$VERSION.so ../lib/bfd-plugins
popd
## install_append end

%files
%defattr(-,root,root,-)
